apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-webapp-deployment
spec:
  replicas: {{ .Values.global.autoscaling.minReplicas }}
  selector:
    matchLabels:
      app: k8s-app
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 50%
      maxSurge: 50%

  template:
    metadata:
      labels:
        app: k8s-app
      annotations:
        "cluster-autoscaler.kubernetes.io/safe-to-evict": "true"
    spec:
      terminationGracePeriodSeconds: 120
      containers:
        - name: go-webapp
          image: {{ .Values.global.dockerParameter.dockerPath }}:{{ .Values.global.dockerParameter.dockerVersion }}
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8080
          resources:
            {{ (index .Values.resources "default") | toJson }}
          env:
            - name: WEB_APP_ENV
              value: "k8s"
            - name: CONFIGOR_DATABASE_HOST
              value: "go-webapp-postgres"
            - name: CONFIGOR_DATABASE_PORT
              value: "5432"
            - name: CONFIGOR_DATABASE_DBNAME
              value: "testdb"
            - name: CONFIGOR_DATABASE_USERNAME
              value: "testusr"
            - name: CONFIGOR_DATABASE_PASSWORD
              value: "testusr"
            - name: CONFIGOR_REDIS_ENABLED
              value: "true"
            - name: CONFIGOR_REDIS_HOST
              value: "go-webapp-redis"
            - name: CONFIGOR_REDIS_PORT
              value: "6379"
            - name: CONFIGOR_REDIS_PORT
              value: "6379"
          livenessProbe:
            httpGet:
              path: "/api/health"
              port: 8080
            initialDelaySeconds: 20
            timeoutSeconds: 3
            periodSeconds: 60
          readinessProbe:
            httpGet:
              path: "/api/health"
              port: 8080
            initialDelaySeconds: 20
            timeoutSeconds: 3